# -*- coding: utf-8 -*-

# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import multiprocessing
import numpy as np

from skimage import io,data,filters,segmentation,measure,morphology,color,feature,draw
from skimage.util import img_as_ubyte
from math import pi,sqrt,sin,cos
import cv2
import copy
import json
from building_polygon import *
from building_decomposition import *
from building_refinement import *
from building_modelfit import *
from hrnet_seg import *
from building_obj import *
from circle_model import *

import argparse
from distutils.version import LooseVersion
from multiprocessing import Queue, Process

from PyQt5.QtWidgets import QMessageBox, QApplication, QWidget, QDialog, QLabel, QLineEdit, QProgressBar
from PyQt5.QtCore import Qt

class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(656, 454)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(20, 10, 581, 221))
        self.groupBox.setObjectName("groupBox")
        self.label_ort = QtWidgets.QLabel(self.groupBox)
        self.label_ort.setGeometry(QtCore.QRect(20, 32, 81, 16))
        self.label_ort.setAlignment(QtCore.Qt.AlignCenter)
        self.label_ort.setObjectName("label_ort")
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setGeometry(QtCore.QRect(110, 30, 331, 22))
        self.lineEdit.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton_ort = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_ort.setGeometry(QtCore.QRect(460, 30, 71, 21))
        self.pushButton_ort.setObjectName("pushButton_ort")
        self.pushButton_dsm = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_dsm.setGeometry(QtCore.QRect(460, 70, 71, 21))
        self.pushButton_dsm.setObjectName("pushButton_dsm")
        self.label_dsm = QtWidgets.QLabel(self.groupBox)
        self.label_dsm.setGeometry(QtCore.QRect(20, 72, 71, 16))
        self.label_dsm.setAlignment(QtCore.Qt.AlignCenter)
        self.label_dsm.setObjectName("label_dsm")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_2.setGeometry(QtCore.QRect(110, 70, 331, 22))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.radioButton_class = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_class.setGeometry(QtCore.QRect(15, 100, 301, 20))
        self.radioButton_class.setAcceptDrops(True)
        self.radioButton_class.setAutoExclusive(False)
        self.radioButton_class.setObjectName("radioButton_class")
        self.label_class = QtWidgets.QLabel(self.groupBox)
        self.label_class.setGeometry(QtCore.QRect(20, 120, 81, 41))
        self.label_class.setScaledContents(True)
        self.label_class.setAlignment(QtCore.Qt.AlignCenter)
        self.label_class.setWordWrap(True)
        self.label_class.setObjectName("label_class")
        self.pushButton_class = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_class.setGeometry(QtCore.QRect(460, 130, 71, 21))
        self.pushButton_class.setObjectName("pushButton_class")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_3.setGeometry(QtCore.QRect(110, 130, 331, 22))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_osm = QtWidgets.QLabel(self.groupBox)
        self.label_osm.setGeometry(QtCore.QRect(20, 192, 81, 21))
        self.label_osm.setScaledContents(True)
        self.label_osm.setAlignment(QtCore.Qt.AlignCenter)
        self.label_osm.setWordWrap(True)
        self.label_osm.setObjectName("label_osm")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_4.setGeometry(QtCore.QRect(110, 190, 331, 22))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.pushButton_osm = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_osm.setGeometry(QtCore.QRect(460, 190, 71, 21))
        self.pushButton_osm.setObjectName("pushButton_osm")
        self.radioButton_osm = QtWidgets.QRadioButton(self.groupBox)
        self.radioButton_osm.setGeometry(QtCore.QRect(15, 160, 301, 20))
        self.radioButton_osm.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.radioButton_osm.setAcceptDrops(True)
        self.radioButton_osm.setAutoExclusive(False)
        self.radioButton_osm.setObjectName("radioButton_osm")
        self.label_out = QtWidgets.QLabel(self.centralwidget)
        self.label_out.setGeometry(QtCore.QRect(20, 361, 111, 21))
        self.label_out.setAlignment(QtCore.Qt.AlignCenter)
        self.label_out.setObjectName("label_out")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(130, 360, 331, 22))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.buttonBox = QtWidgets.QDialogButtonBox(self.centralwidget)
        self.buttonBox.setGeometry(QtCore.QRect(10, 400, 621, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.pushButton_out = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_out.setGeometry(QtCore.QRect(480, 360, 71, 21))
        self.pushButton_out.setObjectName("pushButton_out")

        self.pushButton_contact = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_contact.setGeometry(QtCore.QRect(40, 390, 91, 31))
        self.pushButton_contact.setObjectName("pushButton_contact")

        self.radioButton_circle = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_circle.setGeometry(QtCore.QRect(30, 310, 181, 20))
        self.radioButton_circle.setObjectName("radioButton_circle")
        self.radioButton_circle.setAcceptDrops(True)
        self.radioButton_circle.setAutoExclusive(False)
        self.spinBox_tl = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox_tl.setGeometry(QtCore.QRect(480, 262, 61, 22))
        self.spinBox_tl.setMinimum(45)
        self.spinBox_tl.setMaximum(150)
        self.spinBox_tl.setSingleStep(5)
        self.spinBox_tl.setProperty("value", 120)
        self.spinBox_tl.setObjectName("spinBox_tl")
        self.label_tl = QtWidgets.QLabel(self.centralwidget)
        self.label_tl.setGeometry(QtCore.QRect(30, 262, 221, 16))
        self.label_tl.setObjectName("label_tl")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton_ort.clicked.connect(self.openfile_ortho)
        self.pushButton_dsm.clicked.connect(self.openfile_dsm)
        self.pushButton_class.clicked.connect(self.openfile_class)
        self.pushButton_osm.clicked.connect(self.openfile_osm)

        self.pushButton_out.clicked.connect(self.openfile_out)
        self.pushButton_contact.clicked.connect(self.openwindow_contact)

        if self.radioButton_class.isChecked() == False:
            self.class_Name = 'auto'
        if self.radioButton_osm.isChecked() == False:
            self.osm_Name = 'none'
        if len(self.lineEdit_5.text()) < 1:
            self.out_Name = sys.path[0]

        # initial value for ortho and dsm name
        self.ortho_Name = 'none'
        self.dsm_Name = 'none'

        self.buttonBox.accepted.connect(self.on_OK_Clicked)
        self.buttonBox.rejected.connect(self.close)

    def setbarValue(self, task_number, total_task_number, prog_value):
        if task_number == 0 and total_task_number == 0:
            self.setLabelText(self.tr('On progressing'))
        else:
            label = "Step" + str(task_number + 1) + ": " + step_status(task_number)
            self.setLabelText(self.tr(label))
        self.setValue(int(prog_value))

    def on_OK_Clicked(self):
        Tl = self.spinBox_tl.value()
        Td = 10
        Th1 = 0.5
        Th2 = 0.1
        if self.radioButton_circle.isChecked() == False:
            self.circle_mode = 'off'
        else:
            self.circle_mode = 'on'

        if len(self.dsm_Name) < 5 or len(self.ortho_Name) < 5:
            info_box = QtWidgets.QMessageBox()
            info_box.setWindowTitle('Input file error')
            info_box.setText('Please check input file name of Orthophoto and DSM')
            info_box.setGeometry(500, 500, 200, 100)
            info_box.setStandardButtons(QtWidgets.QMessageBox.Ok)
            info_box.exec_()
        elif len(self.ortho_Name) >= 5 and len(self.dsm_Name) >= 5:
            img_ortho = io.imread(self.ortho_Name)
            imgsize = np.shape(img_ortho)
            fileerror = 0
            if len(imgsize) < 3:
                fileerror = 1
            else:
                if imgsize[2] != 3:
                    fileerror = 1
            if fileerror == 1:
                info_box = QtWidgets.QMessageBox()
                info_box.setWindowTitle('Input file error')
                info_box.setText('Please check input Orthophoto')
                info_box.setGeometry(500, 500, 200, 100)
                info_box.setStandardButtons(QtWidgets.QMessageBox.Ok)
                info_box.exec_()
            else:
                # main processing function
                self.run_fit_main(self.dsm_Name, self.ortho_Name, self.class_Name, self.osm_Name, self.out_Name, Tl, Td,
                                  Th1, Th2, self.circle_mode)

        QtWidgets.QApplication.processEvents()

    def openfile_ortho(self):
        openfile_name, _ = QtWidgets.QFileDialog.getOpenFileName(self, 'select orthophoto', "",
                                                                 "image files(*.tif , *.png)")
        if len(openfile_name) > 0:
            self.lineEdit.setText(openfile_name)
            self.ortho_Name = openfile_name

    def openfile_dsm(self):
        openfile_name, _ = QtWidgets.QFileDialog.getOpenFileName(self, 'select DSM', "", "image files(*.tif)")
        if len(openfile_name) > 0:
            self.lineEdit_2.setText(openfile_name)
            self.dsm_Name = openfile_name

    def openfile_class(self):
        if self.radioButton_class.isChecked() == True:
            openfile_name, _ = QtWidgets.QFileDialog.getOpenFileName(self, 'select classification image', "",
                                                                     "image files(*.tif , *.png)")
            if len(openfile_name) > 0:
                self.lineEdit_3.setText(openfile_name)
                self.class_Name = openfile_name
        elif self.radioButton_class.isChecked() == False:
            self.class_Name = 'auto'

    def openfile_osm(self):
        if self.radioButton_osm.isChecked() == True:
            openfile_name, _ = QtWidgets.QFileDialog.getOpenFileName(self, 'select OSM', "", "image files(*.shp)")
            if len(openfile_name) > 0:
                self.lineEdit_4.setText(openfile_name)
                self.osm_Name = openfile_name
        elif self.radioButton_osm.isChecked() == False:
            self.osm_Name = 'none'

    def openfile_out(self):
        opendirectory = QtWidgets.QFileDialog.getExistingDirectory(self, "Output file Directory", "./")
        if len(opendirectory) > 0:
            self.lineEdit_5.setText(opendirectory)
            self.out_Name = opendirectory
        else:
            self.out_Name = sys.path[0]

    def openwindow_contact(self):
        info_box = QtWidgets.QMessageBox()
        info_box.setWindowTitle('Contact Information')
        info_box.setStyleSheet("QLabel{"
                               "min-width: 400px;"
                               "min-height: 150px; "
                               "font-size:14px;"
                               "}")
        info_box.setText(
            'Authors: Shengxi Gui, Rongjun Qin<br /><br />Email: qin.324@osu.edu<br /><br />GitHub: https://github.com/GDAOSU/LOD2BuildingModel')
        info_box.setTextFormat(QtCore.Qt.MarkdownText)
        info_box.setGeometry(600, 600, 400, 300)
        info_box.setStandardButtons(QtWidgets.QMessageBox.Ok)
        info_box.button(QtWidgets.QMessageBox.Ok)
        info_box.exec_()

    def run_fit_main(self, dsm_name, ortho_name, label_name, osm_name, out_name, Tl, Td, Th1, Th2, circle_mode):
        # set progress bar
        progressbar = QtWidgets.QProgressDialog(self)
        progressbar.setWindowTitle("Please wait")
        progressbar.setLabelText("On processing")
        progressbar.setCancelButtonText("Cancel")
        progressbar.setMinimumDuration(5)
        progressbar.setWindowModality(Qt.WindowModal)
        progressbar.setRange(0, 100)

        # 0. data preprocessing
        # load data & preprocess
        img_dsm = io.imread(dsm_name)
        img_ortho = io.imread(ortho_name)

        total_number = 6
        current_task = 0

        progressbar.setValue(1)
        barlabel = "Step" + str(current_task + 1) + ": " + step_status(current_task)
        progressbar.setLabelText(barlabel)
        progressbar.setValue(5)

        # Section 1. building detection and segmentation
        if label_name == 'auto':
            cv2.setNumThreads(0)
            cv2.ocl.setUseOpenCL(False)
            img_label = HRNet_building(img_ortho, out_name)
        else:
            img_label = io.imread(label_name)

        img_ortho = img_as_ubyte(img_ortho)

        if osm_name != 'none':
            osmshp = shapefile.Reader(osm_name)
            tfw = np.loadtxt(ortho_name.replace('.tif', '.tfw'))

        # extend image range, help to process the bordering buildings
        imgsize = np.shape(img_dsm)
        padimg = 100
        img_ortho_t = np.zeros((imgsize[0] + padimg * 2, imgsize[1] + padimg * 2, 3), dtype=np.uint8)
        img_dsm_t = np.zeros((imgsize[0] + padimg * 2, imgsize[1] + padimg * 2), dtype=np.float32)
        img_label_t = np.zeros((imgsize[0] + padimg * 2, imgsize[1] + padimg * 2), dtype=np.uint8)
        img_dsm_t[padimg:imgsize[0] + padimg, padimg:imgsize[1] + padimg] = img_dsm
        img_label_t[padimg:imgsize[0] + padimg, padimg:imgsize[1] + padimg] = img_label
        img_ortho_t[padimg:imgsize[0] + padimg, padimg:imgsize[1] + padimg, :] = img_ortho

        img_dsm[np.isnan(img_dsm)] = 9999
        min_height = np.min(img_dsm)
        img_dsm[np.where(img_dsm == 9999)] = min_height

        img_dsm_t[np.isnan(img_dsm_t)] = min_height
        imgsize_t = np.shape(img_dsm_t)

        # exclude small region in building mask
        img_mask = np.zeros((imgsize_t[0], imgsize_t[1]), dtype=np.uint8)
        if np.max(img_label_t) == 255:
            img_mask[np.where(img_label_t == 255)] = 1
        else:
            img_mask = img_label_t
        bw_mask = morphology.remove_small_objects(img_mask.astype(bool), min_size=200, connectivity=1)
        bw_mask = ndimage.binary_fill_holes(bw_mask).astype(bool)

        # connectivity detection
        L_mask, L_num = measure.label(bw_mask, return_num=True, connectivity=2)

        current_task += 1

        # Section 2. Initial 2D building polygon extraction
        barlabel = "Step" + str(current_task + 1) + ": " + step_status(current_task)
        progressbar.setLabelText(barlabel)
        progressbar.setValue(15)

        # 1. initial line extraction (Douglas–Peucker algorithm)
        ini_line = initial_line_extraction(L_mask, L_num)

        # 2. line adjustment
        adj_line = line_adjustment(ini_line, L_num)

        # 3. line regularization
        line_reg_thr = Tl
        reg_line, pt0, main_ori = line_regularization(adj_line, L_num, line_reg_thr, img_ortho_t)

        file_polygon = os.path.join(out_name, 'building_polygon.json')
        with open(file_polygon, 'w') as file_object:
            json.dump(reg_line, file_object)
        file_corner = os.path.join(out_name, 'building_corner.json')
        with open(file_corner, 'w') as file_object:
            json.dump(pt0, file_object)
        np.save(os.path.join(out_name, 'main_ori.npy'), main_ori)

        progressbar.setValue(25)
        current_task += 1

        img_ortho_bound = copy.deepcopy(img_ortho_t)
        for line_group in reg_line:
            for line_dr in line_group:
                x0 = int(round(line_dr[1]))
                y0 = int(round(line_dr[3]))
                x1 = int(round(line_dr[2]))
                y1 = int(round(line_dr[4]))
                cv2.line(img_ortho_bound, (x0, y0), (x1, y1), 255, 1, cv2.LINE_AA)
        cv2.imwrite(os.path.join(out_name, 'boundary.png'), img_ortho_bound)

        # Section 3. building rectangle decomposition
        # 0. organize the list points and lines in polygon
        pt_list_int = []
        pt_list_float = []
        line_list_int = []
        for i in range(L_num):
            pt_int = copy.deepcopy(pt0[i])
            pt_int.append(pt_int[0])
            pt_int = np.array(pt_int).astype(int)
            pt_list_int.append(list(pt_int))
            pt_float = copy.deepcopy(pt0[i])
            pt_float.append(pt_float[0])
            pt_list_float.append(list(pt_float))
            line_int = []
            for j in range(len(pt0[i])):
                k = 1
                sita = np.arctan((pt_int[j, 2] - pt_int[j + 1, 2]) / (pt_int[j, 1] - pt_int[j + 1, 1]))
                if abs(sita - main_ori[i]) < pi / 4:
                    k = 2
                line_int.append([pt_int[j][0], pt_int[j][1], pt_int[j][2], \
                                 pt_int[j + 1][1], pt_int[j + 1][2], k, sita])
            line_list_int.append(line_int)

        barlabel = "Step" + str(current_task + 1) + ": " + step_status(current_task)
        progressbar.setLabelText(barlabel)
        progressbar.setValue(30)

        polygon_line = reg_line

        # single core
        # decp_rect = decpose_rec(pt_list_int, pt_list_float, line_list_int, polygon_line, img_dsm_t, img_ortho_t, L_mask,Td,Th1,Th2)

        # multicore core
        decp_rec_type = []
        partial_work_decp = partial(decpose_rec_multi, pt_list_int=pt_list_int, pt_list_float=pt_list_float, \
                                    line_list_int=line_list_int, img_dsm_t=img_dsm_t, img_ortho_t=img_ortho_t, \
                                    L_mask=L_mask, Td=Td, Th1=Th1, Th2=Th2)
        with Pool(multiprocessing.cpu_count() - 1) as p:
            decp_rec = p.map(partial_work_decp, polygon_line)
            decp_rec_type.append(decp_rec)
        decp_rect = decp_rec_type[0]

        file_rectangle = os.path.join(out_name, 'building_rectangle.json')
        with open(file_rectangle, 'w') as file_object:
            json.dump(decp_rect, file_object)

        img_ortho_decp = copy.deepcopy(img_ortho_t)

        progressbar.setValue(40)
        current_task += 1

        for line_group in decp_rect:
            if len(line_group) == 0:
                continue
            for line_dr in line_group:
                rec = np.reshape(line_dr[2:10], (4, 2))
                temp = list(rec)
                temp.append(rec[0, :])
                rec1 = np.array(temp)
                rec1[3, 0], rec1[2, 0] = rec1[2, 0], rec1[3, 0]
                rec1[3, 1], rec1[2, 1] = rec1[2, 1], rec1[3, 1]
                for i in range(4):
                    x0 = int(round(rec1[i, 0]))
                    y0 = int(round(rec1[i, 1]))
                    x1 = int(round(rec1[i + 1, 0]))
                    y1 = int(round(rec1[i + 1, 1]))
                    cv2.line(img_ortho_decp, (x0, y0), (x1, y1), 255, 1, cv2.LINE_AA)
        cv2.imwrite(os.path.join(out_name, 'rectangle.png'), img_ortho_decp)

        decp_rect0 = copy.deepcopy(decp_rect)
        if circle_mode == 'on':
        # Circle section 1. circle detection
            T_v = 4
            circle_radian = one_circle_hough_trans(L_mask, L_num, T_v)
            print(50)

        # Circle section 2. circle & rectangle refine
            circle_radian1, rect_list = circle_check(circle_radian, decp_rect, L_mask, img_ortho_t, img_dsm_t)
            decp_rect0 = rect_list

            img_circle = copy.deepcopy(img_ortho_t)
            for circle_radian_para in circle_radian1:
                for j, circle in enumerate(circle_radian_para):
                    center = circle[1]
                    for k, radius in enumerate(circle[2]):
                        cv2.circle(img_circle, (round(center[0]), round(center[1])), round(radius), (0, 255, 0), 2)
                        cv2.circle(img_circle, (round(circle[3][k][1][0]), round(circle[3][k][1][1])), 1, (0, 0, 255), 4)
                        cv2.circle(img_circle, (round(circle[3][k][2][0]), round(circle[3][k][2][1])), 1, (0, 0, 255), 4)
            cv2.imwrite(os.path.join(out_name, 'circle_radian_ortho.png'), img_circle)


        # Section 4. building rectangle orientation refinement
        barlabel = "Step" + str(current_task + 1) + ": " + step_status(current_task)
        progressbar.setLabelText(barlabel)
        progressbar.setValue(65)
        current_task += 1

        # 1. construct 2D shape format and irregular building segment
        decp_rec_reg, decp_ir = derive_irreg(decp_rect0, pt_list_int, L_mask)
        shape2d = construct2d(decp_rec_reg)

        # 2. OSM & image cooridnate
        if osm_name != 'none':
            shp = osmshp.shapes()
            line_ori, st_line = process_shp(shp, tfw, imgsize)
            img_geo_x, img_geo_y = extract_img_geo(tfw, imgsize)

            # 3. use osm street line to regualize rectangle orienation
            shape2d_osm = construct2d_OSM(shape2d, img_geo_x, img_geo_y, st_line)
        else:
            shape2d_osm = shape2d

        np.save(os.path.join(out_name, 'building_refinement.npy'), np.array(shape2d_osm))

        img_ortho_ref = copy.deepcopy(img_ortho_t)

        for line_dr in shape2d_osm:
            if len(line_dr) == 0:
                continue
            rec = np.reshape(line_dr[8:16], (4, 2))
            temp = list(rec)
            temp.append(rec[0, :])
            rec1 = np.array(temp)
            rec1[3, 0], rec1[2, 0] = rec1[2, 0], rec1[3, 0]
            rec1[3, 1], rec1[2, 1] = rec1[2, 1], rec1[3, 1]
            for i in range(4):
                x0 = int(round(rec1[i, 0]))
                y0 = int(round(rec1[i, 1]))
                x1 = int(round(rec1[i + 1, 0]))
                y1 = int(round(rec1[i + 1, 1]))
                cv2.line(img_ortho_ref, (x0, y0), (x1, y1), 255, 1, cv2.LINE_AA)
        for line_group in decp_ir:
            if len(line_group) == 0:
                continue
            for i_line in range(len(line_group) - 1):
                x0 = int(round(line_group[i_line][1]))
                y0 = int(round(line_group[i_line][2]))
                x1 = int(round(line_group[i_line + 1][1]))
                y1 = int(round(line_group[i_line + 1][2]))
                cv2.line(img_ortho_ref, (x0, y0), (x1, y1), 255, 1, cv2.LINE_AA)

        cv2.imwrite(os.path.join(out_name, 'shape2d.png'), img_ortho_ref)

        # Section 5. 3D model fitting
        barlabel = "Step" + str(current_task + 1) + ": " + step_status(current_task)
        progressbar.setLabelText(barlabel)
        progressbar.setValue(70)

        # exhaustive search for the parameter and cost
        para3d_type = []
        shape2d_temp = copy.deepcopy(shape2d_osm)
        partial_work = partial(mutli_fit, imgsize_t=imgsize_t, L_mask=L_mask, img_dsm_t=img_dsm_t)
        with Pool(multiprocessing.cpu_count() - 1) as p:
            parat = p.map(partial_work, shape2d_osm)
            para3d_type.append(parat)

        # for rec in shape2d_temp:
        #    parat=single_fit(rec, imgsize_t, L_mask, img_dsm_t)
        #    para3d_type.append(parat)

        progressbar.setValue(85)

        para3d_type0 = []
        for temp in para3d_type[0]:  # for multi_fit function
            # for temp in para3d_type: # for single_fit function
            para3d_type0.append(temp.flatten())

        para3d_tot = []
        dsmlist_tot = []
        partial_dsm = partial(dsm_fitting_fast, img_dsm_t=img_dsm_t)
        for i in range(len(para3d_type0)):
            roof_type = np.argmin(para3d_type0[i][5::6])
            para3d_temp = np.hstack((roof_type + 1, para3d_type0[i][roof_type * 6:roof_type * 6 + 6]))
            para3d_tot.append(para3d_temp)
        shape3d = np.hstack((np.array(shape2d_temp), np.array(para3d_tot)))
        with Pool(multiprocessing.cpu_count() - 1) as p:
            dsmlist_p = p.map(partial_dsm, shape3d)
            dsmlist_tot.append(dsmlist_p)

        # for recshp in shape3d:
        #    dsmlist_p=dsm_fitting_fast(recshp, img_dsm_t)
        #    dsmlist_tot.append(dsmlist_p)

        para3d = para3d_tot
        dsmlist = dsmlist_tot[0]
        # para3d, dsmlist_tot = dsm_fitting_fast(shape3d, img_dsm_t)
        build_dsm = list2dsm(dsmlist, img_dsm_t)

        # para3d, build_dsm = dsm_fitting(shape2d_osm, imgsize_t, img_dsm_t, L_mask, para3d_type0)
        build_dsm[np.where(build_dsm < min_height)] = img_dsm_t[np.where(build_dsm < min_height)]
        build_dsm1 = build_dsm[padimg:imgsize_t[0] - padimg, padimg:imgsize_t[1] - padimg]

        progressbar.setValue(90)
        current_task += 1

        para3d_list = []
        for i in para3d:
            para3d_list.append(i.tolist())
        file_model = os.path.join(out_name, 'building_3dmodel.json')
        with open(file_model, 'w') as file_object:
            json.dump(para3d_list, file_object)


        # Circle section 3. circle 3D model fitting
        if circle_mode == 'on':
            circle_roof = circle_reconstruction(img_dsm_t, L_mask, circle_radian1)
            build_dsm2 = circle_dsm(circle_radian1, circle_roof, L_mask, build_dsm)
            build_dsm1 = build_dsm2[padimg:imgsize_t[0] - padimg, padimg:imgsize_t[1] - padimg]

        io.imsave(os.path.join(out_name, 'building_dsm.tif'), build_dsm1)

        # Section 6. Mesh generation
        barlabel = "Step" + str(current_task + 1) + ": " + step_status(current_task)
        progressbar.setLabelText(barlabel)
        progressbar.setValue(95)

        if len(shape2d_osm) > 0:
            node0, face0, texture0 = cal_obj(np.array(shape2d_osm), para3d, img_dsm, min_height)
        else:
            node0, face0, texture0 = [], [], []

        if len(decp_ir) > 0:
            irr_n, irr_f, irr_vt = DSMtoMesh(decp_ir, img_dsm_t, L_mask, min_height)
            node1, face1, texture1 = MeshMerge(node0, face0, texture0, irr_n, irr_f, irr_vt)
        else:
            node1, face1, texture1 = node0, face0, texture0

        if circle_mode == 'on' and len(circle_radian1) > 0:
            cir_n, cir_f, cir_vt = circle_obj(circle_radian1, circle_roof, L_mask, min_height)
            node2, face2, texture2 = MeshMerge(node1, face1, texture1, cir_n, cir_f, cir_vt)
        else:
            node2, face2, texture2 = node1, face1, texture1

        if len(node2) > 0:
            filename = os.path.join(out_name, 'building_model.obj')
            write_obj(filename, node2, face2, texture2)
            io.imsave(filename.replace('building_model.obj', 'model_texture.jpg'), img_ortho)

            write_obj_roof_type(filename.replace('.obj', '_roof.obj'), node2, face2, texture2,
                                np.array(shape2d_osm), para3d, decp_ir, img_ortho)

        progressbar.setValue(100)
        QMessageBox.information(self, "Notice", "LoD-2 complete")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SAT2LOD2 circle version"))
        self.groupBox.setTitle(_translate("MainWindow", "Input data"))
        self.label_ort.setText(_translate("MainWindow", "Orthophoto"))
        self.pushButton_ort.setText(_translate("MainWindow", "Select"))
        self.pushButton_dsm.setText(_translate("MainWindow", "Select"))
        self.label_dsm.setText(_translate("MainWindow", "DSM"))
        self.radioButton_class.setText(_translate("MainWindow", "input user\'s classification image (optional)"))
        self.label_class.setText(_translate("MainWindow", "Classification"))
        self.pushButton_class.setText(_translate("MainWindow", "Select"))
        self.label_osm.setText(_translate("MainWindow", "OSM"))
        self.pushButton_osm.setText(_translate("MainWindow", "Select"))
        self.radioButton_osm.setText(_translate("MainWindow", "use OSM file (optional)"))
        self.label_out.setText(_translate("MainWindow", "output folder"))
        self.pushButton_out.setText(_translate("MainWindow", "Select"))
        self.pushButton_contact.setText(_translate("MainWindow", "Contact Info"))
        self.radioButton_circle.setText(_translate("MainWindow", "Circular building mode"))
        self.label_tl.setText(_translate("MainWindow", "Length threshold T_l (pixel) [45-150]"))

#progress bar text
def step_status(num):
    numbers = {
        0: "Building detection and segmentation",
        1: "Initial 2D building polygon extraction",
        2: "Building rectangle decomposition",
        3: "Building rectangle orientation refinement",
        4: "3D model fitting",
        5: "Mesh generation",
        6: "Model complete"
    }
    return numbers.get(num, None)

if __name__ == "__main__":
    multiprocessing.freeze_support()
    app = QtWidgets.QApplication(sys.argv)
    mywindow = Ui_MainWindow()
    mywindow.show()
    sys.exit(app.exec_())